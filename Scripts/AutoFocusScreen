require("libs.Utils")
require("libs.ScriptConfig")
require("libs.Stuff")
require("libs.HeroInfo")
local config = ScriptConfig.new()
config:SetParameter("Active", "Q", config.TYPE_HOTKEY)
config:SetParameter("doubletapInterval", 280)
config:Load()

local toggleKey   = config.Active
local doubletapInterval= config.doubletapInterval
local activ       = false
local monitor     = client.screenSize.x/1600
local F14         = drawMgr:CreateFont("F14","Tahoma",14*monitor,550*monitor) 
local debugText  = drawMgr:CreateText(10*monitor,475*monitor,-1,"debug",F14) debugText.visible = true
local start = 0

local hotkeyText
if string.byte("A") <= toggleKey and toggleKey <= string.byte("Z") then
	hotkeyText = string.char(toggleKey)
else
	hotkeyText = ""..toggleKey
end

--[[asdasd
function Key(msg,code)
	if client.chat or client.console or client.loading then return end
	
		if IsKeyDown(toggleKey) and GetTick() < (start+doubletapInterval) and not activ then
			entityList:GetMyHero():SafeCastItem("item_cyclone",entityList:GetMyHero())
		end
		if IsKeyDown(toggleKey) and not activ then
			start=GetTick()
			activ = true
			statusText.text = "(" .. hotkeyText .. ") Auto Cyclone: Active"
					end	
		
		
		if code==toggleKey and msg==KEY_UP then 
			statusText.text = "(" .. hotkeyText .. ") Auto Cyclone: Off"
			activ=false
			
			
		end
		
end
]]


	

function Tick(tick)
local myPos = Vector2D(myHero.position.x,myHero.position.y)
	
	if not SleepCheck(main) then return end Sleep(30,main)
	local me    = entityList:GetMyHero()
	local ID    = me.classId
	local haveBlink = me:FindItem("item_blink")
	
		if PlayingGame() and me.alive and not (client.paused or me:IsChanneling()) then
			--if haveBlink and haveBlink.cd > 11 then
			client:ExecuteCmd("+dota_camera_center_on_hero")
			client:ExecuteCmd("-dota_camera_center_on_hero")
			debugText.text = "cooling down"
			else debugText.text = "ready"
			end
		--client:ExecuteCmd("-dota_camera_center_on_hero") 
		end
	end




function Load()
	if PlayingGame() then
		local me    = entityList:GetMyHero()
		if not me then
			script:Disable()

		else
			reg = true
			script:RegisterEvent(EVENT_TICK,Tick)
			--script:RegisterEvent(EVENT_KEY,Key)
			script:UnregisterEvent(Load)
		end
	end
end

function GameClose()
	collectgarbage("collect")
	if reg then
		script:UnregisterEvent(Tick)
		script:RegisterEvent(EVENT_TICK,Load)
		reg = false
		statusText.visible = false
	end
end

script:RegisterEvent(EVENT_CLOSE,GameClose)
script:RegisterEvent(EVENT_TICK,Load)
